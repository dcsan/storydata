rooms:
  #--------------- cell --------------------

  - name: cell
    state: default
    states:
      # should enter as task1 state. no navbar to show the 'eye'
      - name: default
        short:
          "You are in what appears to be an inmate‚Äôs bedroom.
          \nThere's a desk in front of you.  ‚å®Ô∏è Type
          \n
          \n> `L desk`
          \n
          \nto Look at the desk
          \n"
        imageUrl: asylum/rooms/cell.jpg
        # buttons:
        #   - look around | task1|üëÅ

      - name: task1
        imageUrl: asylum/rooms/cell.jpg
        short: "You are in what appears to be an inmate‚Äôs bedroom. \n
          You see a desk and some furniture. \n
          The door slams shut behind you. "
        navbar: full

      # repeat room description
      - name: task2
        imageUrl: asylum/rooms/cell-1.jpg
        short: "üí° ‚Ä¶ ‚Ä¶ ‚Ä¶\n
          You are in what appears to be an inmate‚Äôs bedroom. \n
          You see a a desk, a sink, a window, a door, lights, and a wall covered with images.
          \n
          \nOne of the lights has come on.
          "
        navbar: full

      - name: task3
        imageUrl: asylum/rooms/cell-2.jpg
        short: "üí°üí° ‚Ä¶ ‚Ä¶\n
          two of the lights are on"
        navbar: full

      - name: task4
        imageUrl: asylum/rooms/cell-dark.jpg
        short: "üí°üí°üí° ‚Ä¶\n
          three of the lights are on, and a yellow light is coming in through the window."
        navbar: full

      - name: task5
        imageUrl: asylum/rooms/cell-4.jpg
        short: "üí°üí°üí°üí°\n
          all of the lights are on"

    actions:

      # call to inspect the notebook (tasklist) item
      - match: ^(tasks|üìï)$
        then:
          before:
            - x tasklist

      # if player tries to do tasks out of order
      - match: checkorder
        always:
          reply: "
            Let's not get ahead of ourselves...
            :pencil2: check `tasks`
          "
          buttons:
            - "tasks|task|üìï"

      # TODO - context sensitive hints
      # - match: hint
      #   then:
      #     reply: "
      #       :pencil2:  you can type  `tasks` for the last instructions \n
      #       type `help` for other commands
      #     "

      - match: info
        then:
          reply: navbar here
          navbar: full

      - match: ask Leo
        then:
          reply: Which Leo could they mean? You'd better take a `Look` around the cell...

      - match: ask michael
        then:
          reply: Which Michael could they mean? You look around the cell...

      # general things
      - match: sleep
        then:
          reply: You're not tired.

      - match: make bed
        then:
          reply: You tidy up the bed. Little things matter.

      - match: repair sink
        then:
          reply: You can't magically fix the missing faucet

      - match: spit on soap
        then:
          reply: Better find way to turn the broken faucet

      - match: move pillow
        then:
          reply: It feels a bit lumpy.

      - match: eat soap
        then:
          reply: You take a bite but quickly decide better of it.

      - match: look mattress
        then:
          reply: There's nothing special about it, and nothing is hidden underneath.

      - match: use lights|turn lights on|turn on lights
        then:
          reply: They seem to be controlled from outside the room.

      - match: get dressed|get undressed
        then:
          reply: You'll need to find something else to wear.

      # when you click button examine in web
      - match: ":mag: view poster"
        always:
          reply: ":eyes:"
          # reply: "$username looked :mag: at the poster"

      - match: view poster
        always:
          reply: ":mag:"
          # reply: $username looked at the poster

      - match: get poster|turn poster over|look at back of poster|flip poster
        always:
          reply: "You turn the poster over to see the following scrawled in black Sharpie: \n
            \n> Four good boys in turns did wash
            \n> First was Hans the boy from Ansbach
            \n> Next was Nick with ruddy skin
            \n> While Piers did follow after him
            \n> The last was Fez a swarthy chum
            \n> He did the deed then all were done.
            "

      - match: checkdress
        if:
          all:
            - player.dressed = yes
        then:
          reply: You're looking smart
        else:
          reply: Sharpen up Jack!

      # this has to be first or can get into a loop on 'wash'
      - match: washalert
        if:
          all:
            - tasklist.state = task3
        then:
          reply: "
            The voice crackles out:
            \n> _We always wash the same four parts of our body, Jack.
            \n> And Michael knows the order._
            \n
            \n :pencil2: (Type `wash _____, _____, _____, _____` in the correct order)
            "
        else:
          after:
            - checkorder

      # right answer! moves to task4
      # long matches have to got FIRST or it won't match
      - match: wash hands neck ears face
        if:
          all:
            - tasklist.state = task3
        then:
          # reply: you start washing up
          callJS: checkWashing
        else:
          after:
            - checkorder

      # hands ears neck face shortcut
      - match: ^hnef$
        then:
          after:
            - washalert

      # failing matches
      - match: ^(wash|wash face with soap|wash hands with soap)$
        if:
          all:
            - soap.has = yes
        then:
          after:
            - washalert
        else:
          reply: you don't have any soap

      - match: ^use soap$
        if:
          all:
            - soap.has = yes
        then:
          reply: Use soap to do what?
        else:
          reply: you don't have any soap

      - match: ^(wash face|wash face with soap|wash hands with soap)$
        if:
          all:
            - soap.has = yes
        then:
          reply: closer, but we wash all four parts of our body
        else:
          reply: you don't have any soap

      - match: ^use soap on sink$
        if:
          all:
            - soap.has = yes
        then:
          reply: You use the soap, but cleaning the sink doesn't do much.

      # failing matches with just one part
      - match: wash (yourself) with soap|wash with soap|use soap to wash|wash with soap
        then:
          after:
            - washalert

      # failing matches with just one part
      - match: ^(wash hands|wash ears|wash neck|wash face|wash up)$
        then:
          after:
            - washalert

      - match: wash (hanz|nick|piers|fez)
        then:
          reply: wash what? Is that a body part?

      - match: (hanz|nick|piers|fez)
        then:
          reply: Maybe you should wash... ? Hanz and Nick?

      - match: scrub|clean|wash|shower
        then:
          after:
            - washalert

      - match: ^use handle$
        if:
          all:
            - handle.has = yes
            - sink.state = handle
        then:
          reply: Use the handle where? (make a full sentence)
        else:
          reply: You aren't holding a handle.

      - match: use handle on sink|put handle on sink|attach handle to sink
        if:
          all:
            - handle.has = yes
        then:
          imageUrl: asylum/shots/320/sink-handle.jpg
          reply: ":star: You attach the handle to the faucet.
            \nThe Tannoy blasts out:
            \n> _We always wash the same four parts of our body, Jack.
            \n> And Michael knows the order._
            \n
            \n(Type wash _____, _____, _____, _____ in the correct order)"
          setProps:
            - sink.handle = yes
            - sink.state = handle
            - handle.state = sink
        else:
          reply: You don't have a handle.


      - match: sit .* (chair|desk)
        then:
          reply: You sit on the uncomfortable chair. Nothing happens aside from... discomfort.

      - match: enter bed
        then:
          reply: You're not tired.

      - match: enter wardrobe
        then:
          reply: This is not a C.S. Lewis novel...

      - match: open window|look out window
        then:
          reply: The bars prevent access to the window.

      - match: open desk
        always:
          reply: the drawer is locked.
          # reply: You look in the desk drawer and find a tasklist.
          # setProps:
          #   - desk.state = open

      - match: get note|read note|take note
        then:
          reply: ":star: You pick up the note.
            \n_(‚å®Ô∏è Type `item` to see what you're carrying)_"
          imageUrl: asylum/shots/320/note-detail.jpg
          take:
            - note
          setProps:
            - desk.state = shut_none
          after:
            - task1

      - match: close desk
        always:
          reply: You close the desk drawer.
          setProps:
            - desk.state = shut
          after:
            - x desk

      - match: search desk|look under desk
        always:
          reply: You don't find anything interesting around the desk
          setProps:
            - desk.state = open
          after:
            - x desk

      # ------  task: dress ---------
      - match: open wardrobe
        always:
          reply: You open the wardrobe.
          navbar: none
        if:
          all:
            - robe.has = yes
        then:
          setProps:
            - wardrobe.state = openEmpty
            - wardrobe.open = yes
          after:
            - x wardrobe
        else:
          setProps:
            - wardrobe.open = yes
            - wardrobe.state = openRobe
          after:
            - x wardrobe

      # close and retain state based on if youer wearing clothes
      - match: close wardrobe
        always:
          reply: The doors creak as you close them.
        if:
          all:
            - handle.has = yes
        then:
          setProps:
            - wardrobe.state = closedOneHandle
          after:
            - x wardrobe
        else:
          setProps:
            - wardrobe.state = closed
          after:
            - x wardrobe

      - match: (get|take) handle from (wardrobe|closet|dresser)|(get|take) wardrobe handle|(get|take) handle wardrobe
        if:
          all:
            - handle.has = no
        then:
          reply: You remove the odd looking handle from the wardrobe.
          imageUrl: shared/anims/blue-hand-50.gif
          take:
            - handle
          setProps:
            - handle.has = yes
            - wardrobe.state = closedOneHandle
        else:
          reply: You already have the handle

      - match: ^(get handle)$
        always:
          reply: get the handle from where? (make a full sentence)

      # need to add code to alllow multiple ifs / branches
      - match: get robe|wear robe|take clothes
        if:
          all:
            - wardrobe.open = yes
            - robe.has = no
        then:
          reply: ":star: You put on the blue robe."
          navbar: none
          # imageUrl: shared/anims/blue-hand-50.gif
          take:
            - robe
          setProps:
            - robe.has = yes
            - wardrobe.state = openEmpty
          after:
            - checkTask1
        else:
          reply: You can't see a robe. # could be either shut/has

      - match: get sandals|wear sandals
        then:
          reply: ":star: You slip on the blue sandals"
          take:
            - sandals
          setProps:
            - sandals.has = yes
            - bed.state = nosandals
          after:
            - checkTask1

      - match: drop sandals
        then:
          reply: You put the sandals back under the bed.
          # not implemented in engine yet
          drop:
            - sandals
          setProps:
            - sandals.has = no
            - bed.state = default
          after:
            - checkTask1

      # check dressed
      - match: checkTask1
        if:
          all:
            - robe.has = yes
            - sandals.has = yes
        then:
          reply: You're fully dressed now.
          imageUrl: shared/anims/blue-hand-50.gif
          setProps:
            - player.dressed = yes
          after:
            - task2
        else:
          imageUrl: asylum/items/120/tannoy.png
          reply: "The tannoy blurts out\n
            \n> _You're halfway there, Jack._
            "

      # task 1 - get dressed - triggered in room
      - match: ^(task1|look room|look around|üëÅ)$
        if:
          all:
            - tasklist.state = start
        then:
          imageUrl: asylum/items/120/tannoy.png
          reply: "A voice crackles over a hidden speaker in the room.
            \n
            \n> _‚ÄúTo proceed to breakfast, please follow your morning routine.
            \n> Remember, every good boy dresses sharply.‚Äù_
            \n
            \nbasic game commands:
            "
          navbar: full
          # hint: ":pencil2:  you can type  `tasks` for the last instructions"
          setProps:
            - tasklist.state = task1
            - room.state = task1
            - lights.state = task1
        else:
          reply: You're still in the cell
          navbar: full
          # hint: ":pencil2:  you can type  `tasks` for the last instructions or `hint` if you're stuck"

      # task 2 - do exercise
      - match: task2
        then:
          reply: "üí° ‚Ä¶ ‚Ä¶ ‚Ä¶\n
          The bottom bulb in a column of four has come on, now glowing a bright green above the others.
            The same voice crackles over the speaker.
            \n> _‚ÄúThat‚Äôs a good boy, Jack. Now remember, exercise makes the man. Just as many times as there are legs in the room.‚Äù_"
          navbar: full
          setProps:
            - tasklist.state = task2
            - room.state = task2
            - lights.state = task2

      # task #3 - get washed
      - match: task3
        then:
          reply: "üí°üí° ‚Ä¶ ‚Ä¶\n
          The second in the column of four green lightbulbs lights up and the invisible speaker crackles.
            \n> _‚ÄúWell done, young Jack. You‚Äôre fit as a fiddle. And now it‚Äôs time for all good boys to scrub away those mean, nasty germs. Let‚Äôs not be careless, now. Follow proper procedure.‚Äù_
            "
          navbar: full
          setProps:
            - tasklist.state = task3
            - room.state = task3
            - lights.state = task3

      # task #4 - color puzzle
      - match: task4
        then:
          reply: "üí°üí°üí° ‚Ä¶\n
            The third green light in the column above the sink turns on and the voice is encouraging this time.
            \n> _‚ÄúJack, my boy, you‚Äôre a wonderful lad.
            Limber and loose and clean as a goose. And dressed up so nicely to boot!‚Äù_"
          buttons:
            - ask where my real clothes are | realclothes | üëï
          setProps:
            - tasklist.state = task4
            - room.state = task4
            - lights.state = task4

      # task #4 - color puzzle
      - match: task5
        then:
          reply: "A panel slides open on the door revealing a combination lock."
          setProps:
            - panel.state = locked
            - lock.state = locked
            - room.state = task5
            - tasklist.state = task5

      - match: task6
        then:
          reply: The door is open! Time to make your escape?
          setProps:
            - panel.state = unlocked
            - lock.state = unlocked
            - door.state = unlocked
            - room.state = task6
            - tasklist.state = task5

      - match: ask where my real clothes are|real clothes|cracked|realclothes|ask about clothes|ask clothes|ask where|üëï
        then:
          imageUrl: asylum/rooms/cell-dark.jpg
          reply: Suddenly, there is a deep crack, and all the lights drop out in the facility.
            All that remains is the artificial yellow glow from outside your window
            and the three illuminated green lightbulbs above the sink.
          buttons:
            - ask about those terms and conditions | termsandconds|üìÑ

      - match: termsandconds|ask about [.*|] terms|ask about terms|üìÑ
        then:
          reply: "
            \n> _‚ÄúJackkkk‚Ä¶‚Äù_
            \nThe voice is faint and eerie, like a record being played at the wrong speed.
            "
          after:
            - greenMessage

      - match: greenMessage
        then:
          reply: "
            \n> _‚ÄúI‚Äômmm envioussss of youuu Jackkk. Can you matchhhhh the collllllor of my envyyyy, Jackkk?‚Äù_
            "

      # task 4 win
      - match: use robe on window|use sandals on window|use sandals with window|use robe with window|cover window with robe|use robe and sandals on window|hang robe on window
        if:
          all:
            - tasklist.state = task4
        then:
          reply: "üí°üí°üí°üí°\n
            You cover the window and the blue material is transformed to green by the yellow light.
            The fourth and final green lightbulb above the sink blinks on."
          imageUrl: shared/anims/blue-hand-50.gif
          after:
            - task5
        else:
          reply: Nothing special happens.

      - match: COMBO 3162|3162|3 1 6 2
        then:
          reply: "You dial in the numbers 3,1,6,2 on the panel combination lock. \n
            You input the code correctly and hear the lock open"
          imageUrl: asylum/shots/320/panel-code.jpg
          after:
            - task6

      - match: "d{4}"
        then:
          reply: "You dial in the four numbers but the lock doesn't open. It seems like the wrong combination"

      # door
      - match: open sesame
        then:
          reply: You shout "sesame" to the room.
            Slowly, the door opens.
          setProps:
            - door.state = open

      - match: find soap
        then:
          reply: Hmm, where did  you put the soap? A fairy might know.

      - match: fairy
        then:
          reply: Where do fairies put things?

      # # exit via door
      # - match:
      #   always:
      #     reply: You try the door.
      #   if:
      #     all:
      #       - door.state = locked
      #   then:
      #     reply: It's locked.
      #   else:
      #     reply: It opens.
      #     goto: epilogue

      - match: exercise
        then:
          reply: What kind of exercise? Maybe Leo would know.

      - match: pushups|push ups|squat|burpees
        then:
          reply: That's not the kind of exercise we do here! Ask Leo.

      # has to come before next one since that matches just 'jacks'
      - match: 24 jumping jacks|24 jacks|24 jumping jacks|jump 24 times|jump 24|jacks 24
        if:
          all:
            - tasklist.state = task2
        then:
          imageUrl: shared/anims/blue-hand-50.gif
          reply: You slip out of your blue sandals and perform 24 jumping jacks in your socks.
            You can‚Äôt remember doing these since childhood. It‚Äôs rather fun, actually.
          after:
            - task3
        else:
          reply: "
            \n> _Let's not get ahead of ourselves, now, Jack.
            \n> Follow instructions, lad._
            "
          buttons:
            - tasks|task|üìï
          # hint: ":pencil2: check your `tasks` for what to do next"

      - match: ^(\\d{4+})$
        then:
          reply: cute.

      - match: "(jump|jumping|jumping jacks|jacks) \\d{1}"
        then:
          reply: Jumping jacks are what we do. But that is too many or too few. Did you count *all* the legs in the room?

      - match: "(jump|jumping|jumping jacks|jacks) \\d{2}"
        then:
          reply: Jumping jacks are what we do. But how many legs are in the room? Did you check with Leo?

      - match: "\\d+ (jump|jumping|jumping jacks|jacks)"
        then:
          reply: Jumping jacks are what we do. But how many legs are in the room? Did you check with Leo?

      - match: jump|jumping jacks|jacks
        then:
          reply: You'll have to say how many times _(make a full sentence)_

      - match: look pillow
        if:
          all:
            - soap.has = yes
        then:
          reply: A soiled pillow case. Nothing inside.
        else:
          reply: ":star: there's a bar of soap inside the pillowcase"
          setProps:
            - soap.seen = yes

      # soap
      # still has the problem when you have the soap
      # as we can't do multiple IFs/switch statement
      # also when `x soap` is used

      - match: get soap from pillow
        if:
          all:
            - soap.has = no
        then:
          reply: ":star: You take the soap out of the pillowcase"
          take:
            - soap
          setProps:
            - pillow.state = noSoap
        else:
          reply: what soap?

      - match: get soap from michael
        then:
          reply: "you can't take the soap from a poster, silly!"

      - match: get soap
        if:
          all:
            - soap.has = no
            - soap.seen = yes
        then:
          reply: ":star: You take the soap out of the pillowcase"
          take:
            - soap
          setProps:
            - pillow.state = noSoap
        else:
          reply: "Get soap from where? \n
            :pencil2: _You might have to search around_"

      - match: drop soap
        always:
          setProps:
            - pillow.state = hasSoap
            - soap.has = no
          drop:
            - soap

      - match: look under bed|l under bed|x under bed
        if:
          all:
            - sandals.has = yes
        then:
          reply: It's a bit dirty down there, but you don't see anything particular interesting.
        else:
          reply: You see a pair of blue plastic sandals.

      - match: turn handle|turn faucet|turn water on|turn tap
        if:
          all:
            - sink.handle = yes
        then:
          reply: Water begins trickling out. Now might be a good time to wash up...
        else:
          reply: The handle looks out of place on the wardrobe.

      - match: use handle on sink|attach handle to sink|use handle with sink
        if:
          all:
            - handle.has = yes
        then:
          setProps:
            - sink.handle = yes
            - sink.state = handle
            - handle.state = sink
          reply: ":star: You attach the handle to the sink faucet. It seems to fit perfectly."
          # imageUrl: shared/anims/blue-hand-50.gif
        else:
          reply: You don't have a handle.

      - match: use sink|turn faucet|turn on sink|turn sink on|turn handle|use sink|turn on tap|turn tap
        if:
          all:
            - sink.handle = yes
        then:
          reply: You turn the handle and water starts running out. You could clean up here!
        else:
          reply: You can't turn the broken faucet.

      - match: jog|running|sit ups|walking|pushups
        then:
          reply: We do another type of exercise here. Ask Leo.

      - match: get item
        then:
          reply: Get what item? You have to be more specific

      - match: look item
        then:
          reply: Look at what item? Be more specific.

      - match: get desk
        then:
          reply: The desk is too heavy. But maybe you can look at it

      # task #5
      - match: ^(exit room|walk out|open door|escape|use door|go out|go through door|exit|leave|run)$
        if:
          all:
            - door.state = unlocked
        then:
          reply: You step from your cell and into a dark hallway.
          goto: epilogue1
        else:
          reply: The door won't open.

      - match: use yellow
        then:
          reply: you don't have anything yellow. you might have some blue things though?

      - match: use .* on light
        then:
          reply: The lights are green. This doesn't affec the color in the room very much.

      - match: put on robe
        then:
          reply: you wear the robe.

      - match: look ceiling
        then:
          reply: You look up but there's nothing special.

      - match: "\\d{4}"
        then:
          reply: It seems to be the wrong combination

      - match: break window
        then:
          reply: You crash against the glass but the metal bars stop you from doing any damage.

      - match: macaroni
        then:
          reply: You say the 'safe word' but noone is around to hear.

      - match: cover window$
        then:
          reply: cover window with what?

    items:
      - name: door
        state: locked
        canTake: false
        states:
          - name: locked
            short: The door is locked. There is a small window facing out with a metal panel below it.
            imageUrl: asylum/shots/320/celldoor-no-panel.jpg
          - name: panel
            short: The panel on the door has slid open revealing a combination lock
            imageUrl: asylum/shots/320/celldoor-panel.jpg
          - name: unlocked
            short: The door is unlocked. Time to make your escape?

      - name: clock
        canTake: false
        states:
          - name: default
            # short: A clock without hands... I guess it‚Äôs not meant to tell time.
            short: A roman numeral clock... how old fashioned.
            imageUrl: asylum/shots/320/clock.png

      - name: panel
        called: door panel|lock
        canTake: false
        state: default
        states:
          - name: default
            short: It looks like the panel may be covering something. There are no ways to open it that you can see.
          - name: locked
            short: "The panel has slid open revealing a combination lock. A message says: \n
              `ENTER COMBO _ _ _ _`"
            imageUrl: asylum/shots/320/panel-zeros.jpg
          - name: unlocked
            short: The lock has been opened

      - name: note
        called: memo
        canTake: true
        onTake: You read the note
        hidden: false
        states:
          - name: default
            short: Instructions with a cryptic message
            imageUrl: asylum/shots/640/note-detail.jpg

      - name: desk
        called: drawer|desk|squat desk|table
        states:
          - name: default
            imageUrl: asylum/shots/320/desk-shut-note.jpg
            short: "An old wooden desk and chair. There's a note on the desk. ‚å®Ô∏è Type
            \n
            \n> `get note`
            \n
            \nto pick up the note
            "

          - name: shut_note
            imageUrl: asylum/shots/320/desk-shut-note.jpg
            short: There's a note
          - name: shut_none
            imageUrl: asylum/shots/320/desk-shut-none.jpg
            short: An old squat desk
          - name: open_note
            imageUrl: asylum/shots/320/desk-open-note.jpg
            short: An old squat desk

      - name: chair
        states:
          - name: default
            short: It's an uncomfortable looking chair.

      - name: handle
        called: faucet|tap
        state: wardrobe
        canTake: true
        hidden: true
        states:
          - name: wardrobe
            short: That's an odd looking wardrobe handle...
          - name: holding
            short: One of the handles is missing from the wardrobe door.
            imageUrl: asylum/items/120/handle.png
          - name: sink
            short: The handle fits perfectly on the sink

      - name: pillow
        called: pillowcase|pillow case
        state: hasSoap
        hidden: true
        states:
          - name: hasSoap
            short: There's a bar of soap inside the pillowcase.
          - name: noSoap
            short: It's just an ordinary, head-stained pillow.

      - name: soap
        called: soap|bar of soap|soapbar
        canTake: true
        unique: true
        hidden: true
        # props:
        #   - seen: no
        states:
          - name: default
            short: It's an ordinary bar of soap.
            imageUrl: asylum/items/120/soap.png

      #-------- wardrobe
      - name: wardrobe
        called: wardrobe|cupboard|closet|wr
        state: closed
        canTake: false
        states:
          - name: closed
            imageUrl: asylum/items/slice/wardrobe-shut.jpg
            short: A free-standing wooden wardrobe is against one wall.
            long: The wardrobe is cheaper than the one you remember from your college dorm.
              It has two narrow doors with rounded handles that look like flower petals.
          - name: closedOneHandle
            imageUrl: asylum/items/slice/wardrobe-onehandle.jpg
            short: A free-standing wooden wardrobe is against one wall. One handle is missing
          # depends on clothes.has which state to show
          - name: openRobe
            imageUrl: asylum/items/slice/wardrobe-robe.jpg
            short: You see a bathrobe hanging inside.
          - name: openEmpty
            imageUrl: asylum/items/slice/wardrobe-empty.jpg
            short: The wardrobe is empty.

      - name: robe
        called: gown|robe|dressing gown|bathrobe
        canTake: true
        onTake: you put on the robe
        hidden: true
        states:
          - name: default
            short: It's a cheap, blue cotton bathrobe.
            imageUrl: asylum/items/240/robe.png

      - name: tasklist
        called: book|tasks|task|üìï
        canTake: true
        state: start
        states:
          - name: start
            short: The notebook is blank until you get some instructions. Have a look around!
            navbar: none
            buttons:
              - look around | task1|üëÅ

          - name: task1
            short: "`[Task 1/5]` The voice had said:
              \n> _To proceed to breakfast, please follow your morning routine.
              \n> Remember, every good boy dresses sharply._
              "
            navbar: none
          - name: task2
            short: "`[Task 2/5]` The voice said
              _‚ÄúThat‚Äôs a good boy, Jack. Now remember, exercise makes the man.
              Just as many times as there are legs in the room‚Äù_
              \n\n
              Remember what exercise is best, Jack? If you don‚Äôt know yourself, ask Leo
              "
            navbar: none
          - name: task3
            navbar: none
            short: "`[Task 3/5]` The voice had said
              _‚ÄúAnd now it‚Äôs time for all good boys to scrub away those mean, nasty germs.‚Äù_
              \n
              \nAre you dreaming about soap, Jack? Maybe a fairy can help you"
          - name: task4
            navbar: none
            short: "`[Task 4/5]`
              _‚ÄúI‚Äômmm envioussss of youuu Jackkk. Can you matchhhhh the collllllor of my envyyyy, Jackkk?‚Äù_
              "
          - name: task5
            navbar: none
            short: "The combination lock on the door leads out of here."

      - name: sandals
        called: sandals|shoes|slippers
        onTake: You slip on the blue sandals
        hidden: true
        canTake: true
        states:
          - name: default
            short: They are translucent blue, and made of plastic.
            imageUrl: asylum/items/240/sandals.png

      - name: bed
        called: under bed
        states:
          - name: default
            imageUrl: asylum/shots/slice/bed-slippers.jpg
            short: A narrow metal bed is here with a soiled old pillow.
          - name: nosandals
            imageUrl: asylum/shots/320/bed.jpg
            short: A narrow metal bed is here with a soiled old pillow.

      - name: sheet
        called: sheets|blanket|sheet
        states:
          - name: default
            short: These sheets have seen better days. They're tighly fitted to the bed.

      - name: sink
        called: faucet
        states:
          - name: default
            imageUrl: asylum/shots/320/sink.jpg
            short: The handle is missing.
          - name: handle
            imageUrl: asylum/shots/320/sink-handle.jpg
            short: The sink looks better with that handle you found.

      - name: lights
        called: wall lights|lightbulbs|lamps
        states:
          - name: default
            short: A vertical row of small lightbulbs is built into the wall above the sink
          - name: task1
            short: üí° ‚Ä¶ ‚Ä¶ ‚Ä¶
              one of the lights has come on
          - name: task2
            short: üí°üí° ‚Ä¶ ‚Ä¶
              two of the lights are lit up
          - name: task3
            short: üí°üí°üí° ‚Ä¶
              three of the four lights are lit
          - name: task4
            short: üí°üí°üí° ‚Ä¶
              More lights are lighting up, it seems you're making progress

      - name: wall
        called: wall|pictures|above bed|over bed|gallery
        states:
          - name: default
            short: Some posters are on the wall.
            long: You see a *drawing*, a *poster* of an album cover, and a *photo*.
            imageUrl: asylum/shots/320/poster-wall.jpg

      - name: drawing
        called: man poster|vitruvian|davinci|da vinci|drawing|leonardo|vitruvian man|diagram
        hidden: true
        canTake: true
        states:
          - name: default
            imageUrl: asylum/items/240/drawing.jpg
            long: It‚Äôs a reproduction of *Leo*nardo DaVinci‚Äôs classic drawing, ‚ÄúVitruvian Man,‚Äù. The figure looks like he is doing some type of exercise.

      - name: photo
        called: face photo|high-school|photo|school photo|pic|picture
        canTake: true
        hidden: true
        states:
          - name: default
            imageUrl: asylum/items/240/school-photo.jpg
            long: It‚Äôs you, from your senior year in high school, complete with forehead acne and love goggles. How did they manage to make a copy of this? Unnerving.

      - name: poster
        called: jackson|high-school|photo|poster|album|album cover|jackson photo
        hidden: true
        canTake: true
        states:
          - name: default
            imageUrl: asylum/items/240/album.jpg
            webUrl: /items/album
            webLinkText: "click to view poster"
            long: You remember this album cover from childhood.
              However, you don‚Äôt remember Michael holding a bar of soap in it.

      - name: window
        states:
          - name: default
            imageUrl: asylum/shots/320/window.jpg
            short: A rectangular window with bars is recessed into the far wall. A door leads out.
            long: The window is frosted and protected by metal bars from your side.
              Upon closer inspection, you notice that the unnatural yellow light from without is pulsing slightly, with the faint electrical buzz of artificial lighting.

      - name: floor
        states:
          - name: default
            short: The floor is hard and cold. If you dripped blood on it they could clean it up before anyone noticed.
